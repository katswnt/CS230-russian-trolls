#BlueJ class context
comment0.target=AdjListsGraph
comment1.params=
comment1.target=AdjListsGraph()
comment1.text=\n\ Constructor\ for\ objects\ of\ class\ AdjListsGraph\n
comment10.params=v1\ v2
comment10.target=void\ addArc(java.lang.Object,\ java.lang.Object)
comment10.text=\n\ Adds\ an\ arc\ between\ two\ vertices\n\ \n\ @param\ v1\ the\ origin\ vertex\n\ @param\ v2\ the\ destination\ vertex\n
comment11.params=v1\ v2
comment11.target=void\ removeArc(java.lang.Object,\ java.lang.Object)
comment11.text=\n\ Removes\ an\ arc\ between\ two\ vertices\n\ \n\ @param\ v1\ the\ origin\ vertex\n\ @param\ v2\ the\ destination\ vertex\n
comment12.params=v1\ v2
comment12.target=void\ addEdge(java.lang.Object,\ java.lang.Object)
comment12.text=\n\ Adds\ an\ edge\ between\ two\ vertices\n\ \n\ @param\ v1\ the\ first\ vertex\n\ @param\ v2\ the\ second\ vertex\n
comment13.params=v1\ v2
comment13.target=void\ removeEdge(java.lang.Object,\ java.lang.Object)
comment13.text=\n\ Removes\ an\ edge\ between\ two\ vertices\n\ \n\ @param\ v1\ the\ first\ vertex\n\ @param\ v2\ the\ second\ vertex\n
comment14.params=v
comment14.target=java.util.LinkedList\ getArcs(java.lang.Object)
comment14.text=\n\ Gets\ two\ levels\ of\ successors\ for\ a\ given\ vertex\n\ \n\ @return\ a\ linked\ list\ with\ two\ levels\ of\ arcs\n\ \n\ @param\ v\ the\ vertex\ to\ check\ \n
comment15.params=v
comment15.target=java.util.LinkedList\ getSuccessors(java.lang.Object)
comment15.text=\n\ Returns\ a\ linked\ list\ of\ the\ successors\ of\ vertex\ v.\n\ Only\ checks\ the\ next\ level\ down\ from\ v.\n\ \n\ @return\ a\ linked\ list\ with\ the\ successors\ of\ v\n\ @param\ v\ the\ vertex\ you\ want\ the\ successors\ of\n
comment16.params=v
comment16.target=java.util.LinkedList\ getPredecessors(java.lang.Object)
comment16.text=\n\ Returns\ a\ linked\ list\ of\ the\ predecessors\ of\ vertex\ v.\n\ Only\ checks\ the\ next\ level\ up\ from\ v.\n\ \n\ @return\ a\ linked\ list\ with\ the\ predecessors\ of\ v\n\ @param\ v\ the\ vertex\ you\ want\ the\ predecessors\ of\n
comment17.params=fileName
comment17.target=void\ saveToTGF(java.lang.String)
comment17.text=\n\ Creates\ a\ TGF\ file\ with\ the\ vertices\ and\ arcs\ of\ this\ graph.\n\ \n\ @param\ fileName\ the\ name\ you\ want\ the\ file\ to\ be\ saved\ with\n
comment18.params=v
comment18.target=java.util.LinkedList\ BFtraversal(java.lang.Object)
comment18.text=\n\ Performs\ a\ breadth-first\ traversal\ of\ the\ graph,\ beginning\ at\ the\n\ user-specificed\ vertex.\n\ \n\ @return\ a\ linked\ list\ with\ all\ vertexes\ visited\ in\ the\ traversal\n\ @param\ v\ the\ vertex\ you\ want\ to\ begin\ your\ traversal\ from\n
comment19.params=v
comment19.target=java.util.LinkedList\ DFtraversal(java.lang.Object)
comment19.text=\n\ Performs\ a\ depth-first\ traversal\ of\ the\ graph,\ beginning\ at\ the\n\ user-specificed\ vertex.\n\ \n\ @return\ a\ linked\ list\ with\ all\ vertexes\ visited\ in\ the\ traversal\n\ @param\ v\ the\ vertex\ you\ want\ to\ begin\ your\ traversal\ from\n
comment2.params=
comment2.target=boolean\ isEmpty()
comment2.text=\n\ Determines\ whether\ a\ graph\ is\ empty\n\ \n\ @return\ a\ boolean\ indicating\ whether\ the\ graph\ is\ empty\n
comment20.params=
comment20.target=java.lang.String\ toString()
comment20.text=\n\ Standard\ toString\ method\n\ \n\ @return\ a\ string\ representation\ of\ the\ graph\n
comment21.params=args
comment21.target=void\ main(java.lang.String[])
comment3.params=
comment3.target=int\ getNumVertices()
comment3.text=\n\ Checks\ the\ number\ of\ vertices\ in\ the\ graph.\n\ \n\ @return\ an\ integer\ representation\ of\ the\ number\ of\ vertices\n
comment4.params=
comment4.target=int\ getNumArcs()
comment4.text=\n\ Checks\ the\ total\ number\ of\ arcs\ in\ the\ graph.\n\ \n\ @return\ an\ integer\ representation\ of\ the\ number\ of\ arcs\n
comment5.params=v1\ v2
comment5.target=boolean\ isArc(java.lang.Object,\ java.lang.Object)
comment5.text=\n\ Determines\ whether\ two\ vertices\ are\ connected\ by\ an\ arc.\n\ \n\ @param\ v1\ the\ first\ vertex\n\ @param\ v2\ the\ second\ vertex\n\ @returns\ boolean\ indicating\ whether\ the\ two\ vertices\ are\ connected\n
comment6.params=v1\ v2
comment6.target=boolean\ isEdge(java.lang.Object,\ java.lang.Object)
comment6.text=\n\ Determines\ whether\ two\ vertices\ are\ connected\ by\ an\ edge.\n\ \n\ @param\ v1\ the\ first\ vertex\n\ @param\ v2\ the\ second\ vertex\n\ @returns\ boolean\ indicating\ whether\ the\ two\ vertices\ are\ connected\ by\ an\ edge\n
comment7.params=
comment7.target=boolean\ isUndirected()
comment7.text=\n\ Determines\ whether\ the\ graph\ is\ undirected.\n\ \n\ @returns\ boolean\ indicating\ whether\ the\ graph\ is\ undirected\n
comment8.params=v
comment8.target=void\ addVertex(java.lang.Object)
comment8.text=\n\ Adds\ a\ vertex\ to\ the\ graph\n\ \n\ @param\ v\ the\ vertex\ to\ be\ added\n
comment9.params=v
comment9.target=void\ removeVertex(java.lang.Object)
comment9.text=\n\ Removes\ a\ vertex\ from\ the\ graph\n\ \n\ @param\ v\ the\ vertex\ to\ be\ removed\n
numComments=22
